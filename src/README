Java Verifier - a tool able to verify the validity of a simplified Java code file. 

=================
===== FILES =====
=================

___Package main:____

Sjavac.java - This class contains the main method of the program which starts the process of reading and
checking the S-java code file received from user, and throwing exceptions if an error is found.

Reader.java- This class represents the Reader which receives a file of code, reads and parses it,
and sends it to translation.

Translator.java - This class represents the translator which receives lines representing code components and
translate(create) them into suitable objects (Block or Method).

CodeComponent.java - This class represents a general code component.
RegexPatternsForMain.java - Contains the regex patterns used in this package.
MainScopeException.java - A general exception in reading the main block.
BadLineFormatException.java - If line is written badly and does not match any code component.
CannotResolveSymbolException.java - When a method or a variable, that do not exist, are being called.
FlowBlockNotInMethodException.java - When flow block is written outside of a method.
ReturnStatementMissingException.java - If a return statement at the end of method is missing.


___Package blocks:___

Block.java - This class represent a general block in the code.
FlowBlock.java - This class represents a flow block (if or while block).
MainBlock.java - This class represents the most outer block of the code.
Method.java - This class represents a method in the code.
BlockFactory.java - A utilities class with a Block objects factory, which creates a Block object
according to the values received.
RegexPatternsForBlocks.java - This class contains all the regex patterns used in this package.
MethodException.java - This class represents a general exception in a block .
BlockTypeException.java - If block type is invalid.
IllegalMethodCallParameters.java - In case a method receives an illegal parameter in method call.
IllegalMethodNameException.java - In case the name of a method is invalid.
ParametersInFlowBlockAreNotBoolean.java - n case flow block receives not a boolean parameter.
VarMultipleInitializationException.java - n case that a variable is over used.


___Package variable:___

Variable.java - This class is an abstract class represents a generic variable.
BoolVariable.java - This class represents a boolean variable.
CharVariable.java - This class represents a char variable.
DoubleVariable.java - This class represents a double variable
IntVariable.java - This class represents an int variable
StrVariable.java - This class represents a string variable
RegexPatternsForVariable.java - This class contains all regex patterns used in this package
VarFactory.java - This class represents the variables factory.
VariableException.java - This class represents a general exception in variable.
IllegalNamException.java - If name of variable is illegal.
IllegalTypeException.java - If type of variable is illegal.
IllegalValueException.java - If value of variable is illegal.
ReassignmentOfFinalVariableException.java - If a final variable was assignment more than once.
UninitializedFinalVariableException.java - If an uninitialized final variable was used.
UsingUninitializedVariableException.java - If an uninitialized variable was used.



=================
===== DESIGN ====
=================

I decided to split our program into three packages: main, blocks, variable.
Each package is responsible for a different part of the exercise.
The 'main' package is the main package of this program: it runs the program and it contains classes which
are responsible for receiving S-java code file from user and translating it into CodeComponent objects.
Then, it processes (by using the variable and blocks packages) the file and checks its validity.
I tried to make this program as modular as possible, so that every part will be independent and will not
need other parts in order to work properly. This made the debugging process a lot easier.


=============================================
== Description of the exceptions hierarchy ==
=============================================

The abstract parent Exceptions classes are MainScopeException, MethodException and VariableException which
inherit java's Exception class. All other exceptions inherit from these Exceptions.
I chose this design because in this way I can handle each warning and error in the most
suitable place and way for it. This makes the code more readable and easy to understand.



